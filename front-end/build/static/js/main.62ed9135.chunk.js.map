{"version":3,"sources":["Airmen.js","NewAirman.js","AirmenList.js","NewPif.js","AllAirmanData.js","AllAirmanDataList.js","App.js","serviceWorker.js","index.js"],"names":["Airmen","props","id","rank","first_name","last_name","axios","require","default","NewAirman","useState","loc","lor","loa","waps","last_review_date","parent","state","setState","handleChange","event","target","name","value","handleSubmit","a","post","JSON","stringify","amn_id","firstName","lastName","LOC","LOR","LOA","WAPS","console","log","className","class","type","onChange","onClick","AirmenList","airmen","exact","path","map","airman","render","grandparent","to","AllAirmanData","String","time_in_service","time_in_grade","epr_data","AllAirmanDataList","airmandata","data","airman_id","defaults","headers","put","App","pif_data","get","response","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.62ed9135.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Airmen(props)\n{\n    \n    return(\n  \n            <tr>\n                   <td>{props.id} </td>\n                   <td>{props.rank} </td>\n                   <td>{props.first_name}</td>\n                  <td>{props.last_name}</td> \n                </tr>\n    )\n}\n\nexport default Airmen;\n","import React, {useState} from 'react';\nconst axios = require('axios').default;\n\n\nfunction NewAirman(props)\n{ \n    const [state, setState] = useState({\n        rank: '',\n        first_name: '',\n        last_name: '',\n        loc: true,\n        lor: true,\n        loa: true,\n        waps: true,\n        last_review_date: '',\n        parent: props.parent\n    })\n\n\n    const handleChange = event => setState({\n        ...state, \n        [event.target.name]: event.target.value\n        \n    })\n\n    const handleSubmit = async () => { \n        let newAirman = {\n            rank: state.rank,\n            first_name: state.first_name,\n            last_name: state.last_name,\n            loc: state.loc,\n            lor: state.lor,\n            loa: state.loa,\n            waps: state.waps,\n            last_review_date: state.last_review_date\n            \n        }\n        axios.post(\"http://localhost:3000/airman\", JSON.stringify({\n            amn_id: 'DEFAULT',\n            rank: state.rank,\n            firstName: state.first_name,\n            lastName: state.last_name\n        }))\n        axios.post(\"http://localhost:3000/api/pif\", JSON.stringify({\n            loc: state.LOC,\n            lor: state.LOR,\n            loa: state.LOA,\n            waps: state.WAPS,\n            last_review_date: state.last_review_date\n        }))\n        console.log(props, props.parent,state)\n        // await props.parent.setState({\n        //     airmen: [...props.parent.props.airmen, newAirman]\n        // })\n        // props.history.push(\"/airman\")\n        // props.history.push(\"/api/pif\")\n    }\n   \n   \n    return(\n        <div>\n            <div className = \"center\">\n                <table class = \"table table -md\">\n\n              <thead>\n                  <tr class = 'table-primary'>\n                      <th>Add Rank</th>\n                      <th>Add First Name</th>\n                      <th>Add Last Name</th>\n                      <th>LOC(True/False)</th>\n                      <th>LOR(True/False)</th>\n                      <th>LOA(True/False)</th>\n                      <th>WAPS(True/False)</th>\n                      <th>Date reviewed</th>\n                  </tr>\n              </thead>\n              <tbody>\n\n              \n            \n            <td><input type = \"text\" name = \"rank\"  onChange = {handleChange}/></td>\n            <td><input type = \"text\" name = \"first_name\"  onChange = {handleChange}/></td>\n            <td><input type = \"text\" name = \"last_name\"  onChange = {handleChange}/></td>\n            <td><input type = \"text\" name = \"loc\" onChange = {handleChange}/></td>\n            <td><input type = \"text\" name = \"lor\"  onChange = {handleChange}/></td> \n            <td><input type = \"text\" name = \"loa\"  onChange = {handleChange}/></td>\n            <td><input type = \"text\" name = \"waps\" onChange = {handleChange}/></td>\n            <td><input type = \"date\" name = \"last_review_date\"  onChange = {handleChange}/></td>\n            <button onClick = {handleSubmit}> Submit </button>\n            </tbody>\n          \n            </table>\n           \n        </div>\n        </div>\n    )\n}\n\n\nexport default NewAirman;","import React from 'react';\nimport Airmen from './Airmen';\nimport NewAirman from './NewAirman';\n\nimport {\n    Route,\n    Link\n} from 'react-router-dom'\n\nfunction AirmenList({airmen, parent})\n{\n    return (\n        <div>\n            \n            <Route exact path = \"/airmen\"><div>\n            <div className=\"center\">\n                <table class = \"table table -md\">\n                    <thead>\n                        <tr class = 'table-primary'>\n                            <th>ID</th>\n                            <th>Rank </th>\n                            <th>First Name </th>\n                            <th>Last Name </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        \n            {airmen.map(airman => <Airmen \n                id = {airman.amn_id}\n                rank = {airman.rank}\n\t\t\t\t first_name = {airman.first_name} \n               last_name = {airman.last_name}/>)}\n             \n             \n                </tbody>\n                </table>\n                </div>\n                </div>\n        \n                </Route>\n                \n            \n\n                <Route path = \"/airmen/new\" render={props => <NewAirman {...props} grandparent={parent} />} />\n                <Link to = \"/airmen/new\">Add New Airmen</Link>\n        </div>\n    )\n}\nexport default AirmenList","import React, {useState} from 'react';\nconst axios = require('axios').default;\n\n\nfunction NewPif(props)\n{ \n    const [state, setState] = useState({\n        LOC: '',\n        LOR: '',\n        LOA: '',\n        WAPS: '',\n        last_review_date: '',\n        grandparent: props.grandparent\n    })\n\n\n    const handleChange = event => setState({\n        ...state, \n        [event.target.name]: event.target.value\n        \n    })\n\n    const handleSubmit = async () => { \n        let newPif = {\n            LOC: String(state.LOC),\n            LOR: state.LOR,\n            LOA: state.LOA,\n            WAPS: state.WAPS,\n            last_review_date: state.last_review_date\n        }\n        axios.post(\"http:localhost:3000/api/pif\", JSON.stringify({\n            LOC: String(state.LOC),\n            LOR: String(state.LOR),\n            LOA: String(state.LOA),\n            WAPS: String(state.WAPS),\n            last_review_date: state.last_review_date\n        }))\n        await state.grandparent.setState({\n            pif_data: [...state.grandparent.state.pif_data, newPif]\n        })\n        props.history.push(\"/pif\")\n    }\n   \n   \n    return(\n        <div>\n            <input type = \"text\" name = \"LOC\" onChange = {handleChange}/>\n            <input type = \"text\" name = \"LOR\"  onChange = {handleChange}/>\n            <input type = \"text\" name = \"LOA\"  onChange = {handleChange}/>\n            <input type = \"text\" name = \"WAPS\"  onChange = {handleChange}/>\n            <input type = \"date\" name = \"last_review_date\"  onChange = {handleChange}/>\n\n            <button onClick = {handleSubmit}> Submit </button>\n        </div>\n    )\n}\n\n\nexport default NewPif;","import React from 'react';\n\nfunction AllAirmanData(props)\n{\n    console.log(props);\n    return(\n        <tr>\n            <td>{props.amn_id}</td>\n            <td>{props.rank}</td>\n            <td>{props.first_name}</td> \n            <td>{props.last_name}</td>\n            <td>{String(props.LOC)}</td> \n            <td>{String(props.LOR)}</td> \n            <td>{String(props.LOA)} </td>\n           <td>{String(props.WAPS)}</td>\n            <td> {props.last_review_date}</td>\n             <td>{String(props.time_in_service)}</td>\n            <td>{String(props.time_in_grade)} </td>\n          <td>{String(props.epr_data)}</td>\n        </tr>\n    )\n}\nexport default AllAirmanData;","import React from 'react';\nimport AllAirmanData from './AllAirmanData';\nimport NewAirman from './NewAirman';\n\n\nimport {\n    Route,\n    Link\n} from 'react-router-dom'\n\nfunction AllAirmanDataList({airmandata, parent})\n{\n    return (\n        <div>\n            <Route exact path = \"/\"><div>\n                \n                <div className=\"center\">\n                    <table class = \"table table -md\">\n                        <thead>\n\n                        <tr class = 'table-primary'>\n\n                        <th>Airman ID</th>\n                        <th>Rank</th>\n                        <th>First Name</th>\n                        <th>Last Name</th>\n                        <th>LOC</th>\n                        <th>LOR</th>\n                        <th>LOA</th>\n                        <th>WAPS</th>\n                        <th>WAPS Last Review Date</th>\n                        <th>Time in service</th>\n                        <th>Time in grade</th>\n                        <th>EPR data</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n\n                       \n                    \n                \n    {airmandata.map(data => {console.log(data);return <AllAirmanData amn_id = {data.airman_id} rank = {data.rank} first_name = {data.first_name} last_name = {data.last_name} LOC = {data.loc} LOR = {data.loa} LOA = {data.loa} WAPS = {data.waps} last_review_date = {data.last_review_date} time_in_service = {data.time_in_service} time_in_grade = {data.time_in_grade} epr_data = {data.epr_data}/> })}\n                \n    </tbody>\n                </table>\n                </div>\n                </div>\n                </Route>\n                {/* <Route path = \"/airmen/new\" render={props => <NewAirman {...props} grandparent={parent} />} /> */}\n                            <NewAirman/>\n                <Link to = \"/airmen/new\">Add New Airmen</Link>\n\n        </div>\n    )\n}\nexport default AllAirmanDataList","import React from 'react';\nimport './App.css';\nimport AirmenList from './AirmenList';\nimport PIFList from './PIFList';\nimport WAPSList from './WAPSList';\nimport AllAirmanDataList from './AllAirmanDataList';\nimport NewAirman from './NewAirman';\nimport ReactTable from \"react-table\";\nimport \"react-table\"\nimport{\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom'\n\n\nconst axios = require('axios').default\naxios.defaults.headers.post['Content-Type'] = 'application/json'\naxios.defaults.headers.put['Content-Type'] = 'application/json'\n\n\nclass App extends React.Component {\n\n  constructor(props)\n  {\n    super(props)\n    this.state = {\n      airmen: [],\n      pif_data: [],\n      WAPS: [],\n      airmandata: []\n    }\n  }\n  async componentDidMount() \n  {\n    var response = await axios.get(\"http://localhost:3000/airman\")\n    console.log(response.data)\n    this.setState ({\n      \n      airmen: response.data,\n    })\n    response = await axios.get(\"http://localhost:3000/pif\")\n    console.log(response.data)\n    this.setState({\n      pif_data: response.data,\n    })\n    response = await axios.get(\"http://localhost:3000/waps\")\n    this.setState({\n      WAPS: response.data,\n    })\n    response = await axios.get(\"http://localhost:3000/allairmandata\")\n    console.log(response.data)\n    this.setState({\n      airmandata: response.data,\n    })\n\n    \n  }\n  render()\n{\n  return(\n    <Router><div className = \"App\">\n      <div className=\"\">\n    <br /><Link to = \"/airmen\">Airman</Link>\n    {/* <br /><Link to = \"/waps\">WAPS Data</Link> */}\n      </div>\n      <Switch>\n        <Route path = \"/airmen\"> \n            <AirmenList airmen = {this.state.airmen} parent={this}/>\n          </Route>\n          {/* <Route path = \"/waps\">\n          <WAPSList waps = {this.state.WAPS} parent={this}/>\n          </Route> */}\n          <Route path = \"/\">\n          <AllAirmanDataList airmandata = {this.state.airmandata} parent={this}/>\n          </Route>\n      </Switch>\n    </div> </Router>\n  )\n};\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}